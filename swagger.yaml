openapi: 3.0.0
info:
  title: E-invoice sending API
  version: 1.1.3
paths:
  /user/create:
    post:
      tags: 
        - user
      summary: creates new user
      description: |
        Creates a new user in the database and returns their user_id and a token for the current session. This no longer works, use /user/create/v2
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: password123
      responses:
        200:
          description: user created
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                  user_id:
                    type: integer
                    example: 1
        400:
          description: no password provided

  /user/create/v2:
    post:
      tags: 
        - user
      summary: creates new user
      description: |
        Creates a new user in the database and returns their user_id and a token for the current session.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: password123
                email: 
                  type: string
                  example: real@email.com
      responses:
        200:
          description: user created
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                  user_id:
                    type: integer
                    example: 1
        400:
          description: no password or email provided
          
  /user/validate:
    post:
      tags: 
        - user
      summary: validates a user
      description: Validates a user by creating a new session for them. This no longer works, use /user/validate/v2
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  example: 1
                password:
                  type: string
                  example: password123
      responses:
        200:
          description: user validated
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        400:
          description: password is invalid
        
        403:
          description: user_id is invalid
                
  /user/invalidate:
    post: 
      tags:
        - user
      summary: invalidates a user
      description: Invalidates a userâ€™s current session.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
      responses:
        200:
          description: user token is invalidated
          content:
            application/html:
              schema:
                type: object
        403:
          description: token is invalid

  /user/validate/v2:
    post:
      tags: 
        - user
      summary: validates a user
      description: Validates a user by creating a new session for them.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: real@email.com
                password:
                  type: string
                  example: password123
      responses:
        200:
          description: user validated
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        400:
          description: password is invalid
        
        403:
          description: email is invalid
                
  /invoice/send/email:
    post:
      tags:
        - invoice
      summary: sends invoice as email
      description: Send an invoice in the form of email ("IMPORTANT:" for the xml_data, directly copy the text from inside a .xml file to use as the and input it into a json stringifier like https://www.textcompare.org/json/stringify/ where the output is the correct format).
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                xml_data:
                  type: string
                  example: "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<Invoice xmlns=\"urn:oasis:names:specification:ubl:schema:xsd:Invoice-2\" xmlns:cac=\"urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2\" xmlns:cbc=\"urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2\" xmlns:cec=\"urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2\">\n<cbc:UBLVersionID>2.1</cbc:UBLVersionID>\n<cbc:CustomizationID>urn:cen.eu:en16931:2017#conformant#urn:fdc:peppol.eu:2017:poacc:billing:international:aunz:3.0</cbc:CustomizationID>\n<cbc:ProfileID>urn:fdc:peppol.eu:2017:poacc:billing:01:1.0</cbc:ProfileID>\n<cbc:ID>EBWASP1002</cbc:ID>\n<cbc:IssueDate>2022-02-07</cbc:IssueDate>\n<cbc:InvoiceTypeCode listAgencyID=\"6\" listID=\"UNCL1001\">380</cbc:InvoiceTypeCode>\n<cbc:DocumentCurrencyCode listAgencyID=\"6\" listID=\"ISO4217\">AUD</cbc:DocumentCurrencyCode>\n<cbc:BuyerReference>EBWASP1002</cbc:BuyerReference>\n<cac:AdditionalDocumentReference>\n    <cbc:ID>ebwasp1002</cbc:ID>\n</cac:AdditionalDocumentReference>\n<cac:AccountingSupplierParty>\n    <cac:Party>\n        <cac:PartyIdentification>\n            <cbc:ID schemeAgencyID=\"ZZZ\" schemeID=\"0151\">80647710156</cbc:ID>\n        </cac:PartyIdentification>\n        <cac:PartyName>\n            <cbc:Name>Ebusiness Software Services Pty Ltd</cbc:Name>\n        </cac:PartyName>\n        <cac:PostalAddress>\n            <cbc:StreetName>100 Business St</cbc:StreetName>\n            <cbc:CityName>Dulwich Hill</cbc:CityName>\n            <cbc:PostalZone>2203</cbc:PostalZone>\n            <cac:Country>\n            <cbc:IdentificationCode listAgencyID=\"6\" listID=\"ISO3166-1:Alpha2\">AU</cbc:IdentificationCode>\n            </cac:Country>\n        </cac:PostalAddress>\n        <cac:PartyLegalEntity>\n            <cbc:RegistrationName>Ebusiness Software Services Pty Ltd</cbc:RegistrationName>\n            <cbc:CompanyID schemeAgencyID=\"ZZZ\" schemeID=\"0151\">80647710156</cbc:CompanyID>\n        </cac:PartyLegalEntity>\n    </cac:Party>\n</cac:AccountingSupplierParty>\n<cac:AccountingCustomerParty>\n    <cac:Party>\n        <cac:PartyName>\n            <cbc:Name>Awolako Enterprises Pty Ltd</cbc:Name>\n        </cac:PartyName>\n        <cac:PostalAddress>\n            <cbc:StreetName>Suite 123 Level 45</cbc:StreetName>\n            <cbc:AdditionalStreetName>999 The Crescent</cbc:AdditionalStreetName>\n            <cbc:CityName>Homebush West</cbc:CityName>\n            <cbc:PostalZone>2140</cbc:PostalZone>\n            <cac:Country>\n            <cbc:IdentificationCode listAgencyID=\"6\" listID=\"ISO3166-1:Alpha2\">AU</cbc:IdentificationCode>\n            </cac:Country>\n        </cac:PostalAddress>\n        <cac:PartyLegalEntity>\n            <cbc:RegistrationName>Awolako Enterprises Pty Ltd</cbc:RegistrationName>\n        </cac:PartyLegalEntity>\n    </cac:Party>\n</cac:AccountingCustomerParty>\n<cac:PaymentMeans>\n    <cbc:PaymentMeansCode listAgencyID=\"6\" listID=\"UNCL4461\">1</cbc:PaymentMeansCode>\n    <cbc:PaymentID>EBWASP1002</cbc:PaymentID>\n</cac:PaymentMeans>\n<cac:PaymentTerms>\n    <cbc:Note>As agreed</cbc:Note>\n</cac:PaymentTerms>\n<cac:TaxTotal>\n    <cbc:TaxAmount currencyID=\"AUD\">10.00</cbc:TaxAmount>\n    <cac:TaxSubtotal>\n        <cbc:TaxableAmount currencyID=\"AUD\">100.00</cbc:TaxableAmount>\n        <cbc:TaxAmount currencyID=\"AUD\">10.00</cbc:TaxAmount>\n        <cac:TaxCategory>\n            <cbc:ID schemeAgencyID=\"6\" schemeID=\"UNCL5305\">S</cbc:ID>\n            <cbc:Percent>10.0</cbc:Percent>\n            <cac:TaxScheme>\n            <cbc:ID schemeAgencyID=\"6\" schemeID=\"UN/ECE 5153\">GST</cbc:ID>\n            </cac:TaxScheme>\n        </cac:TaxCategory>\n    </cac:TaxSubtotal>\n</cac:TaxTotal>\n<cac:LegalMonetaryTotal>\n    <cbc:LineExtensionAmount currencyID=\"AUD\">100.00</cbc:LineExtensionAmount>\n    <cbc:TaxExclusiveAmount currencyID=\"AUD\">100.00</cbc:TaxExclusiveAmount>\n    <cbc:TaxInclusiveAmount currencyID=\"AUD\">110.00</cbc:TaxInclusiveAmount>\n    <cbc:PayableRoundingAmount currencyID=\"AUD\">0.00</cbc:PayableRoundingAmount>\n    <cbc:PayableAmount currencyID=\"AUD\">110.00</cbc:PayableAmount>\n</cac:LegalMonetaryTotal>\n<cac:InvoiceLine>\n    <cbc:ID>1</cbc:ID>\n    <cbc:InvoicedQuantity unitCode=\"C62\" unitCodeListID=\"UNECERec20\">500.0</cbc:InvoicedQuantity>\n    <cbc:LineExtensionAmount currencyID=\"AUD\">100.00</cbc:LineExtensionAmount>\n    <cac:Item>\n        <cbc:Name>pencils</cbc:Name>\n        <cac:ClassifiedTaxCategory>\n            <cbc:ID schemeAgencyID=\"6\" schemeID=\"UNCL5305\">S</cbc:ID>\n            <cbc:Percent>10.0</cbc:Percent>\n            <cac:TaxScheme>\n            <cbc:ID schemeAgencyID=\"6\" schemeID=\"UN/ECE 5153\">GST</cbc:ID>\n            </cac:TaxScheme>\n        </cac:ClassifiedTaxCategory>\n    </cac:Item>\n    <cac:Price>\n        <cbc:PriceAmount currencyID=\"AUD\">0.20</cbc:PriceAmount>\n        <cbc:BaseQuantity unitCode=\"C62\" unitCodeListID=\"UNECERec20\">1.0</cbc:BaseQuantity>\n    </cac:Price>\n</cac:InvoiceLine>\n</Invoice>"
                email:
                  type: string
                  example: invoice.receiver@gmail.com
                subject:
                  type: string
                  example: invoice
                message:
                  type: string
                  example: here is your invoice
                token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
      responses:
        200:
          description: email has been sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  report_id:
                    type: integer
                    example: 1
        400:
          description: incorrect email format
        403:
          description: token is invalid
  
  /invoice/send/sms:
    post:
      tags:
        - invoice
      summary: sends invoice as sms
      description: Send an invoice in the form of SMS ("IMPORTANT:" for the xml_data, directly copy the text from inside a .xml file to use as the and input it into a json stringifier like https://www.textcompare.org/json/stringify/ where the output is the correct format).
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                xml_data:
                  type: string
                  example: "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<Invoice xmlns=\"urn:oasis:names:specification:ubl:schema:xsd:Invoice-2\" xmlns:cac=\"urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2\" xmlns:cbc=\"urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2\" xmlns:cec=\"urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2\">\n<cbc:UBLVersionID>2.1</cbc:UBLVersionID>\n<cbc:CustomizationID>urn:cen.eu:en16931:2017#conformant#urn:fdc:peppol.eu:2017:poacc:billing:international:aunz:3.0</cbc:CustomizationID>\n<cbc:ProfileID>urn:fdc:peppol.eu:2017:poacc:billing:01:1.0</cbc:ProfileID>\n<cbc:ID>EBWASP1002</cbc:ID>\n<cbc:IssueDate>2022-02-07</cbc:IssueDate>\n<cbc:InvoiceTypeCode listAgencyID=\"6\" listID=\"UNCL1001\">380</cbc:InvoiceTypeCode>\n<cbc:DocumentCurrencyCode listAgencyID=\"6\" listID=\"ISO4217\">AUD</cbc:DocumentCurrencyCode>\n<cbc:BuyerReference>EBWASP1002</cbc:BuyerReference>\n<cac:AdditionalDocumentReference>\n    <cbc:ID>ebwasp1002</cbc:ID>\n</cac:AdditionalDocumentReference>\n<cac:AccountingSupplierParty>\n    <cac:Party>\n        <cac:PartyIdentification>\n            <cbc:ID schemeAgencyID=\"ZZZ\" schemeID=\"0151\">80647710156</cbc:ID>\n        </cac:PartyIdentification>\n        <cac:PartyName>\n            <cbc:Name>Ebusiness Software Services Pty Ltd</cbc:Name>\n        </cac:PartyName>\n        <cac:PostalAddress>\n            <cbc:StreetName>100 Business St</cbc:StreetName>\n            <cbc:CityName>Dulwich Hill</cbc:CityName>\n            <cbc:PostalZone>2203</cbc:PostalZone>\n            <cac:Country>\n            <cbc:IdentificationCode listAgencyID=\"6\" listID=\"ISO3166-1:Alpha2\">AU</cbc:IdentificationCode>\n            </cac:Country>\n        </cac:PostalAddress>\n        <cac:PartyLegalEntity>\n            <cbc:RegistrationName>Ebusiness Software Services Pty Ltd</cbc:RegistrationName>\n            <cbc:CompanyID schemeAgencyID=\"ZZZ\" schemeID=\"0151\">80647710156</cbc:CompanyID>\n        </cac:PartyLegalEntity>\n    </cac:Party>\n</cac:AccountingSupplierParty>\n<cac:AccountingCustomerParty>\n    <cac:Party>\n        <cac:PartyName>\n            <cbc:Name>Awolako Enterprises Pty Ltd</cbc:Name>\n        </cac:PartyName>\n        <cac:PostalAddress>\n            <cbc:StreetName>Suite 123 Level 45</cbc:StreetName>\n            <cbc:AdditionalStreetName>999 The Crescent</cbc:AdditionalStreetName>\n            <cbc:CityName>Homebush West</cbc:CityName>\n            <cbc:PostalZone>2140</cbc:PostalZone>\n            <cac:Country>\n            <cbc:IdentificationCode listAgencyID=\"6\" listID=\"ISO3166-1:Alpha2\">AU</cbc:IdentificationCode>\n            </cac:Country>\n        </cac:PostalAddress>\n        <cac:PartyLegalEntity>\n            <cbc:RegistrationName>Awolako Enterprises Pty Ltd</cbc:RegistrationName>\n        </cac:PartyLegalEntity>\n    </cac:Party>\n</cac:AccountingCustomerParty>\n<cac:PaymentMeans>\n    <cbc:PaymentMeansCode listAgencyID=\"6\" listID=\"UNCL4461\">1</cbc:PaymentMeansCode>\n    <cbc:PaymentID>EBWASP1002</cbc:PaymentID>\n</cac:PaymentMeans>\n<cac:PaymentTerms>\n    <cbc:Note>As agreed</cbc:Note>\n</cac:PaymentTerms>\n<cac:TaxTotal>\n    <cbc:TaxAmount currencyID=\"AUD\">10.00</cbc:TaxAmount>\n    <cac:TaxSubtotal>\n        <cbc:TaxableAmount currencyID=\"AUD\">100.00</cbc:TaxableAmount>\n        <cbc:TaxAmount currencyID=\"AUD\">10.00</cbc:TaxAmount>\n        <cac:TaxCategory>\n            <cbc:ID schemeAgencyID=\"6\" schemeID=\"UNCL5305\">S</cbc:ID>\n            <cbc:Percent>10.0</cbc:Percent>\n            <cac:TaxScheme>\n            <cbc:ID schemeAgencyID=\"6\" schemeID=\"UN/ECE 5153\">GST</cbc:ID>\n            </cac:TaxScheme>\n        </cac:TaxCategory>\n    </cac:TaxSubtotal>\n</cac:TaxTotal>\n<cac:LegalMonetaryTotal>\n    <cbc:LineExtensionAmount currencyID=\"AUD\">100.00</cbc:LineExtensionAmount>\n    <cbc:TaxExclusiveAmount currencyID=\"AUD\">100.00</cbc:TaxExclusiveAmount>\n    <cbc:TaxInclusiveAmount currencyID=\"AUD\">110.00</cbc:TaxInclusiveAmount>\n    <cbc:PayableRoundingAmount currencyID=\"AUD\">0.00</cbc:PayableRoundingAmount>\n    <cbc:PayableAmount currencyID=\"AUD\">110.00</cbc:PayableAmount>\n</cac:LegalMonetaryTotal>\n<cac:InvoiceLine>\n    <cbc:ID>1</cbc:ID>\n    <cbc:InvoicedQuantity unitCode=\"C62\" unitCodeListID=\"UNECERec20\">500.0</cbc:InvoicedQuantity>\n    <cbc:LineExtensionAmount currencyID=\"AUD\">100.00</cbc:LineExtensionAmount>\n    <cac:Item>\n        <cbc:Name>pencils</cbc:Name>\n        <cac:ClassifiedTaxCategory>\n            <cbc:ID schemeAgencyID=\"6\" schemeID=\"UNCL5305\">S</cbc:ID>\n            <cbc:Percent>10.0</cbc:Percent>\n            <cac:TaxScheme>\n            <cbc:ID schemeAgencyID=\"6\" schemeID=\"UN/ECE 5153\">GST</cbc:ID>\n            </cac:TaxScheme>\n        </cac:ClassifiedTaxCategory>\n    </cac:Item>\n    <cac:Price>\n        <cbc:PriceAmount currencyID=\"AUD\">0.20</cbc:PriceAmount>\n        <cbc:BaseQuantity unitCode=\"C62\" unitCodeListID=\"UNECERec20\">1.0</cbc:BaseQuantity>\n    </cac:Price>\n</cac:InvoiceLine>\n</Invoice>"
                number:
                  type: string
                  example: 61435395359
                message:
                  type: string
                  example: here is your invoice
                token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
      responses:
        200:
          description: sms has been sent
          content:
            application/html:
              schema:
                type: object
                properties:
                  report_id:
                    type: integer
                    example: 1

        400:
          description: phone number not given
        403:
          description: token is invalid
  /download/invoice/{id}:
    get:
      tags:
        - invoice
      summary: given invoice id sends invoice file
      description: Sends file of invoice to user.
      parameters:
        - in: path
          name: id
          description: invoice_id of invoice
          required: true
          schema:
            type: string
            
      responses:
        200:
          description: >-
            invoice file sent
  
  /report/generate/JSON:
    get:
      tags:
        - report
      summary: generates json communication report
      description: Generates communication report in JSON format.
      parameters:
        - in: query
          name: report_id
          description: report_id of report
          required: true
          schema:
            type: integer
        - in: query
          name: token
          description: token of user
          required: true
          schema:
            type: string
      
      responses:
        200:
          description: >-
            communication report generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
                    example: 1
                  message_id:
                    type: integer
                    example: 2
                  date_sent:
                    type: string
                    example: 11/11/11
                  reciever:
                    type: string
                    example: real@email.com
                  status_code:
                    type: integer
                    example: 200
                  is_sent:
                    type: boolean
                    example: true
                  send_method: 
                    type: string
                    example: email
                  err_message:
                    type: string
                    example: Invalid email address
        400:
          description: >-
            token is invalid
  /report/generate/HTML:
    get:
      tags:
        - report
      summary: generates html communication report
      description: Generates communication report in HTML format.
      parameters:
        - in: query
          name: report_id
          description: report_id of report
          required: true
          schema:
            type: integer
        - in: query
          name: token
          description: token of user
          required: true
          schema:
            type: string
            
      responses:
        200:
          description: communication report generated
          content:
            application/html:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
                    example: 1
                  message_id:
                    type: integer
                    example: 2
                  date_sent:
                    type: string
                    example: 11/11/11
                  reciever:
                    type: string
                    example: real@email.com
                  status_code:
                    type: integer
                    example: 200
                  is_sent:
                    type: boolean
                    example: true
                  send_method: 
                    type: string
                    example: email
                  err_message:
                    type: string
                    example: Invalid email address
        400:
          description: >-
            token is invalid
            
  /report/generate/PDF:
    get:
      tags:
        - report
      summary: generates pdf communication report
      description: Generates communication report in PDF format.
      parameters:
        - in: query
          name: report_id
          description: report_id of report
          required: true
          schema:
            type: integer
        - in: query
          name: token
          description: token of user
          required: true
          schema:
            type: string
            
      responses:
        200:
          description: >-
            communication report generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  report:
                    type: object
                    example: this is a pdf file

  /report/delete:
    post:
      tags:
        - report
      summary: deletes a report
      description: >-
        This will delete a communication report from the database.
      parameters:
      - in: query
        name: token
        description: The token belonging to the user
        required: true
        schema: 
          type: string
      - in: query
        name: report_id
        description: the report the user wants to delete
        required: true
        schema: 
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                report_id:
                  type: integer
                  example: 147
      responses:
        200:
          description: report deleted
          content:
            application/html:
              schema:
                type: object
  
  /report/list:
    post:
      tags:
        - report
      summary: finds a list of report ids
      description: >-
        This will find in the database all report id that have been created by the given user id
      parameters:
      - in: query
        name: token
        description: the token belonging to the user
        required: True
        schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
      responses:
        200:
          description: list of reports
          content:
            application/json:
              schema:
                type: object
                properties:
                  reports: 
                    type: array
                    items:
                      type: integer
                      example: 1
              
  /health/check:
    get:
      tags:
        - health
      summary: checks health of server
      description: Checks whether the server is running.
      responses:
        200:
          description: server is running
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_alive:
                    type: boolean
                    example: true
  /health/check/v2:
    get:
      tags:
        - health
      summary: checks health of server
      description: Checks whether the server is running and includes some added statistics.
      responses:
        200:
          description: server is running
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_alive:
                    type: boolean
                    example: true
                  database_alive:
                    type: boolean
                    example: true
                  invoices_sent:
                    type: integer
                    example: 30
                  up_time (measured in seconds):
                    type: number
                    example: 18.640183448791504
components:
  schemas:
    user:
      type: object
      required:
        - user_id
        - password
      properties:
        user_id:
          type: integer
          example: 1
        password:
          type: string
          example: password123
        
    report:
      type: object
      properties:
        report_id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        time:
          type: string
          example: "2022-03-27 10:12:46.337654"
        reciever:
          type: string
          example: reciever.adr@gmail.com
        status_code:
          type: integer
          example: 200
        is_sent:
          type: boolean
          example: true
        send_method:
          type: string
          example: Email
        err_message:
          type: string
          example: email address was invalid
        
      xml:
        name: Category
    token:
      type: object
      properties:
        session_id:
          type: string
          example: e5f6c4ef-ed53-4885-8893-cd3ea3f7f2c8
        user_id:
          type: integer
          example: 1
        
    invoice:
      type: object
      properties:
        invoice_id:
          type: integer
          example: 1
        xml_data:
          type: string
          example: <note>\n  <to>Tove</to>\n  <from>Jani</from>\n  <heading>Reminder</heading>\n  <body>Don't forget me this weekend!</body>\n</note>\n
      
    
  

servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/SE2Y22G24/e-invoice-sending/1.0.0
  - description: Deployed application
    url: https://e-invoice-sending-app.herokuapp.com
